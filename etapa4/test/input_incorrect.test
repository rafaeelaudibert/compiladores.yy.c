// UFRGS - Compiladores - Marcelo Johann - 2020/1

// Sem redeclaração de variáveis ❌

b = bool : FALSE;
b = float : .5BCD;

c = char : 'x';
a = int: 0;
i = int: 0;
f = float: 0.0;
v1 = int[10]: 0 0 0 0 0 0 0 0 0 0; 
mat = int [ 10]; 

// Sem variáveis não declaradas (aceita os parametros recebidos) ❌
x = char : 'J';
// global = int : 5;
inc(x = int, n = int) = int {
  return x+n+global
};

incn (x = int, n = int) = int {
  return x+n
};

main () = int
  {
  // Escalares usados como escalares ❌
  a[6] = 5
  
  i = a[6]

  // Vetor usado como vetor ❌
  v1 = 55
  print v1

  // Função usada como função ❌
  while (i<10)
  {
    i = incn
    a = incn[2]
  }

  // Verificar argumentos da chamada de função ❌
  i = checking_syntax_with_empty_params(4.5)
  b = checking_syntax_@()

  // Verificar argumentos com tipo compatível ❌
  b = checking_syntax_@(FALSE)
  b = bool_func(4.5)

  // Verificar tipo de retorno de função (compatível) ❌
  b = checking_syntax_with_empty_params()

  // Operadores lógicos somente com booleanos ❌
  if(TRUE | TRUE | FALSE ^ FALSE | 4.9) then
    print "Digite um numero: \n"

  // Operadores de comparação com aritméticos compatíveis ❌
  if (4 > TRUE) then print "F"
  if (FALSE <= 'J') then print "F"

  read a

  print "Incrementado algumas vezes a fica " ,a ,"\n"

  loop (i:1,10,1)
    print "."
  print "\n"

  if (a==15) then 
    print "A=15\n"

  if ( a==15 | a!=17 ) then
    print "A igual a 15 ou 17\n"

  if (i==100) then 
    {
    print "Nao tem como isso...\n"
    }
  else
    print "OK!\n"

  // Retorna valor da função ❌
  // Retorna valor no último comando ❌  
};

bool_func(x = bool) = bool {
  return TRUE
};
  
checking_syntax_with_empty_params() = float {
    return 4.4F
};


checking_syntax_@(w = float) = bool {
  i = 5

  read abcde_123
  print one_variable
  print two_variables, the_other_one
  print with, "a", string, "in", the, "middle"

  if ( (5 == (5 + (6 - 6))) == TRUE ) then
    print "wat"

  if ((5 == 6) | ((3 + ((2 - 4) + 5) * (14 / (2) ))) == 4) then print "a lot of parenthesis"

  if ( 3 != 4 ) then {
      i = a_block
      i = with_assignments
  } else {
      another_block = with_assignments
  }

  { 
      print "a_block"
      {
          another_block_v[inside] = of_it
      }
  }

  i = 6
  while (i < 10) {
      i = i + 1
      print "I is ", i
      {
          print "inside another block"
      }
      i = main()
  }

  loop(id:1, 5 + 5, 3)
    print id, " without a block"

  if (5 > 6) then else print "abcde", "jki", 'c'

  return (4 == 5)
};

// Hoisting ✔️

abcde_123 = int : 0;
one_variable = int : 0;
two_variables = char : 'c';
the_other_one = float : 0.4F;

a_block = char : 'A';
with_assignments = char : 'W';
another_block = char : 'A';

another_block_v = int[5];
inside = char : 'I';
of_it = int : 5;
with = char : 'C';
string = char : 'S';
the = float : .45BC;

id = int : 5;